// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	iface "github.com/lookatitude/beluga-ai/pkg/schema/iface"
	mock "github.com/stretchr/testify/mock"
)

// ChatHistory is an autogenerated mock type for the ChatHistory type
type ChatHistory struct {
	mock.Mock
}

// AddAIMessage provides a mock function with given fields: message
func (_m *ChatHistory) AddAIMessage(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for AddAIMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMessage provides a mock function with given fields: message
func (_m *ChatHistory) AddMessage(message iface.Message) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for AddMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserMessage provides a mock function with given fields: message
func (_m *ChatHistory) AddUserMessage(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for AddUserMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clear provides a mock function with no fields
func (_m *ChatHistory) Clear() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Messages provides a mock function with no fields
func (_m *ChatHistory) Messages() ([]iface.Message, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 []iface.Message
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]iface.Message, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []iface.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iface.Message)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChatHistory creates a new instance of ChatHistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatHistory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatHistory {
	mock := &ChatHistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
