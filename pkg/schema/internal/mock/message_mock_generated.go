// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	iface "github.com/lookatitude/beluga-ai/pkg/schema/iface"
	mock "github.com/stretchr/testify/mock"
)

// Message is an autogenerated mock type for the Message type
type Message struct {
	mock.Mock
}

// AdditionalArgs provides a mock function with no fields
func (_m *Message) AdditionalArgs() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AdditionalArgs")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetContent provides a mock function with no fields
func (_m *Message) GetContent() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetType provides a mock function with no fields
func (_m *Message) GetType() iface.MessageType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 iface.MessageType
	if rf, ok := ret.Get(0).(func() iface.MessageType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(iface.MessageType)
	}

	return r0
}

// ToolCalls provides a mock function with no fields
func (_m *Message) ToolCalls() []iface.ToolCall {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToolCalls")
	}

	var r0 []iface.ToolCall
	if rf, ok := ret.Get(0).(func() []iface.ToolCall); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iface.ToolCall)
		}
	}

	return r0
}

// NewMessage creates a new instance of Message. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Message {
	mock := &Message{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
